/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

$(document).ready(function(){
  // require('./input-date');
  // require('./input-time');
  __webpack_require__(1);
  __webpack_require__(2);
  __webpack_require__(3);
  __webpack_require__(4);
  __webpack_require__(5);
  __webpack_require__(6);

})
// require('./jquery.min');
// require('./bootstrap-datepicker');
// require('./bootstrap-datepicker-thai');
// require('./bootstrap-notify.min');
// require('./custom-notify');
// require('./moment');


/***/ }),
/* 1 */
/***/ (function(module, exports) {

$(document).ready(function () {
  var winddowsW = window.innerWidth; // New width
  menuDisplay(winddowsW);
  $(window).resize(function () {
    // This will execute whenever the window is resized
    // var winddowsH = $(window).height(); // New height
    this.winddowsW = window.innerWidth; // New width
    menuDisplay(this.winddowsW);
    // Date picker
    inlineDatepicker();
  });

  $(document).on('click','#toggle-sidebar',function(){
    $('#sidebar').toggleClass('active');
  });

  $(document).on('click','.spin-link ul li',function(){
    $(this).addClass('active').siblings().removeClass('active');
  });


  function menuDisplay($width) {
    if ($width > 576) {
      $('#sidebar').removeClass('active');
    }

  }

});
function inlineDatepicker() {
  var dpInlineWidth = $('.datepicker-inline').width();
  let marginx2 = ((dpInlineWidth / 7) / 2) - 18;
  $('.datepicker-inline table th').css({ 'margin-left': marginx2 + 'px', 'margin-right': marginx2 + 'px' })
  $('.datepicker-inline table td').css({ 'margin-left': marginx2 + 'px', 'margin-right': marginx2 + 'px' })
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

//For Project infinite scroll
$(document).on('click','.data-can-select-list li',function(event) {
  var target = $(event.target);
 if(!target.is('.fa-heart')){
    $(this).addClass('active').siblings().removeClass('active');
 }
});

class SpinCustomListUI{

  selectOne(selector){
    $(selector).on('click','.data-item',function(event) {
        $(this).addClass('active').siblings().removeClass('active');
      });
  }

}



/***/ }),
/* 3 */
/***/ (function(module, exports) {

class SpinModal {
    initial(name, option) {
        $(name).modal(option);
        $(name).find('#main-tab-menu>li .nav-link').removeClass('show active');
        $(name).find('#main-tab-menu>li:first .nav-link').addClass('active');
        $(name).find('.modal-body>.tab-content>.tab-pane:first').addClass('in active').siblings().removeClass('in active');
    }
    onClose(selectorID,callback) {
        $(selectorID).modal('hidden.bs.modal',callback);
    }
    close(selectorID) {
        $(selectorID).modal('hide');
    }
}


/***/ }),
/* 4 */
/***/ (function(module, exports) {

// Get the <datalist> and <input> elements.
var dataList = document.getElementById('json-datalist');
var input = document.getElementById('ajax');

// Create a new XMLHttpRequest.
var request = new XMLHttpRequest();

// Handle state changes for the request.
request.onreadystatechange = function(response) {
  if (request.readyState === 4) {
    if (request.status === 200) {
      // Parse the JSON
      var jsonOptions = JSON.parse(request.responseText);

      // Loop over the JSON array.
      jsonOptions.forEach(function(item) {
        // Create a new <option> element.
        var option = document.createElement('option');
        // Set the value using the item in the JSON array.
        option.value = item;
        // Add the <option> element to the <datalist>.
        dataList.appendChild(option);
      });

      // Update the placeholder text.
      input.placeholder = "e.g. datalist";
    } else {
      // An error occured :(
      input.placeholder = "Couldn't load datalist options :(";
    }
  }
};

// Update the placeholder text.
// input.placeholder = "Loading options...";

// Set up and make the request.
request.open('GET', 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/4621/html-elements.json', true);
request.send();


/***/ }),
/* 5 */
/***/ (function(module, exports) {


var angle, radius = 1, playing = false, time = 0;

function rotate(degrees) {
    $(".spinning").css({
        '-webkit-transform': 'rotate(' + degrees + 'deg)',
        '-moz-transform': 'rotate(' + degrees + 'deg)',
        '-ms-transform': 'rotate(' + degrees + 'deg)',
        'transform': 'rotate(' + degrees + 'deg)'
    });
}

(function loop() {
    angle = time * radius;
    rotate(angle);
    if (playing) {
        if (radius < 200) {
            radius *= 1.03;
        }
    } else {
        radius *= 0.99;
    }
    time += 0.1;
    requestAnimationFrame(loop)
})();

function spin(play) {
    playing = play
    if(playing){
        time = 0;
        radius = 1;
        $("#login-submit").fadeOut();
        $("#username").prop('disabled', true);
        $("#password").prop('disabled', true);
        $("#remember").prop('disabled', true);
    }else{
        $("#login-submit").fadeIn();
        $("#username").prop('disabled', false);
        $("#password").prop('disabled', false);
        $("#remember").prop('disabled', false);
    }
    
    
}

/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 * 
 * @param {*} time 
 * @returns {string}
 */
function convertTimeString(time) {
    var zero = 4 - time.toString().length + 1;
    return Array(+(zero > 0 && zero)).join("0") + time;
}
// function createSelectableList(filterValue) {
//     selectableList.selectable('destroy').selectable(
//         { stop: getSelectedItems, filter: filterValue }
//     );
//     $(`${className} div`).removeClass('ui-selected');
//     $('#result').expty();

//     var disabledTime = $('div[data-value="1800"]');
//     if (filterValue = '*') {
//         disabledTime.removeClass('excluded');
//     } else {
//         disabledTime.addClass('excluded');
//     }
// }

/***/ })
/******/ ]);